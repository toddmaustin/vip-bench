//
// Mesosphere privacy enhanced execution configuration
//

// TODO: make this an optional flag in the Makefile
#define PERF_OUTPUT_ONLY
// end TODO
#include "../common/utils.h"
#include <valarray>
#include <vector>

#if defined(VIP_NA_MODE)

#define VIP_INIT
#define VIP_ENCCHAR     char
#define VIP_ENCINT      int
#define VIP_ENCUINT     unsigned int
#define VIP_ENCLONG     long
#define VIP_ENCULONG    unsigned long
#define VIP_ENCBOOL     bool
#define VIP_ENCFLOAT    float
#define VIP_ENCDOUBLE   double
#define VIP_VEC_ENCDOUBLE   std::valarray<VIP_ENCDOUBLE>
#define VIP_VEC_ENCINT      std::valarray<VIP_ENCINT>
#define VIP_DEC(X)      (X)
#define VIP_DEC_VEC(X)  (X)

extern inline void vip_init_vector(VIP_VEC_ENCINT* dest, std::vector<int>* source) {
    std::copy(source->begin(), source->end(), std::begin(*dest));
}
inline VIP_VEC_ENCINT   operator<<   (VIP_VEC_ENCINT lhs, int rhs)   { return lhs.cshift(rhs); }
inline VIP_VEC_ENCINT   operator>>   (VIP_VEC_ENCINT lhs, int rhs)   { return lhs.cshift(-rhs); }

#elif defined(VIP_DO_MODE)

#define VIP_INIT
#define VIP_ENCCHAR     char
#define VIP_ENCINT      int
#define VIP_ENCUINT     unsigned int
#define VIP_ENCLONG     long
#define VIP_ENCULONG    unsigned long
#define VIP_ENCBOOL     bool
#define VIP_ENCFLOAT    float
#define VIP_ENCDOUBLE   double
#define VIP_VEC_ENCDOUBLE   std::valarray<VIP_ENCDOUBLE>
#define VIP_VEC_ENCINT      std::valarray<VIP_ENCINT>
#define VIP_DEC(X)      (X)
#define VIP_DEC_VEC(X)  (X)
#define VIP_CMOV(P,A,B) ((P) ? (A) : (B))

extern inline void vip_init_vector(VIP_VEC_ENCINT* dest, std::vector<int>* source) {
    std::copy(source->begin(), source->end(), std::begin(*dest));
}
inline VIP_VEC_ENCINT   operator<<   (VIP_VEC_ENCINT lhs, int rhs)   { return lhs.cshift(rhs); }
inline VIP_VEC_ENCINT   operator>>   (VIP_VEC_ENCINT lhs, int rhs)   { return lhs.cshift(-rhs); }

#elif defined(VIP_ENC_MODE)

#include "meso.h"

#define VIP_INIT        MesoInit(NULL, false)

#define VIP_ENCCHAR     MesoSealedChar
#define VIP_ENCINT      MesoSealedInt32
#define VIP_ENCUINT     MesoSealedUInt32
#define VIP_ENCLONG     MesoSealedLong64
#define VIP_ENCULONG    MesoSealedULong64
#define VIP_ENCBOOL     MesoSealedBool
#define VIP_ENCFLOAT    MesoSealedFloat
#define VIP_ENCDOUBLE   MesoSealedDouble
#define VIP_VEC_ENCDOUBLE   std::valarray<VIP_ENCDOUBLE>
#define VIP_VEC_ENCINT      std::valarray<VIP_ENCINT>
#define VIP_DEC(X)      ((X).asval())
#define VIP_DEC_VEC(X)      (vip_dec_vector(X))
#define VIP_CMOV(P,A,B) MesoCMOV((P), (A), (B))

extern inline void vip_init_vector(VIP_VEC_ENCINT* dest, std::vector<int>* source) {
    dest->resize(source->size());
    for (unsigned int i=0; i<source->size(); i++) {
        (*dest)[i] = (*source)[i];
    }
}
extern inline std::valarray<int> vip_dec_vector(VIP_VEC_ENCINT x){
    std::valarray<int> p(x.size());
    for(unsigned int i=0; i<x.size(); i++){
        p[i] = VIP_DEC(x[i]);
    }
    return p;
}
inline VIP_VEC_ENCINT   operator<<   (VIP_VEC_ENCINT lhs, int rhs)   { return lhs.cshift(rhs); }
inline VIP_VEC_ENCINT   operator>>   (VIP_VEC_ENCINT lhs, int rhs)   { return lhs.cshift(-rhs); }


// Meso require DO mode code
#undef  VIP_DO_MODE
#define VIP_DO_MODE

#endif

