# VIP Benchmark Suite


## Introduction

This is the VIP Benchmark Suite, which is a collection of benchmarks to serve the evaluation of privacy-enhanced computation frameworks.
A privacy-enhance computation framework is one in which encrypted data can be directly processed without sofware needing to decrypt it.
These systems naturally enhance privacy since hacking into a system using privacy-enhanced computation only gives the attacker access
to ciphertext. Examples of privacy-enhanced computation frameworks that this benchmark suite wants to server are: homomorphic encryption,
sequestered encryption, runtime encryption, confidential computing, etc.

*Why do we need a privacy-oriented benchmark suite?* Privacy-oriented programming has two primary impacts on software algorithms: first,
the algorithms become less heuristic since they can no longer inspect the data they are operating on; and second, the core datatypes will
be replaced with encrypted (and otherwise enhanced) data types. The VIP Benchmark Suite has already done this work for you, for a wide
range of application that suggest a strong need for data privacy.

*My privacy-enhanced computation framework doesn't work with some/all of the VIP benchmarks!* Yes, this may be the case
If you cannot support a benchmark, due to the data types it requires or the complexity of its
computation, perhaps you can benchmark without that particular application. Since some of the privacy-enhanced frameworks can do all of
these benchmarks, we felt it was important to take a great-common-demoninator approach to selecting benchmarks, rather than a
least-common-demoninator approach.  In any event, please help us build in support for your framework in our benchmark suite.


## VIP Benchmarks

The VIP benchmarks were selected for their (mostly) obvious demands for data privacy. Currently, the benchmark suite supports the following
benchmarks.

- **Bubble Sort** - Sorts an array of integers using the bubble sort algorithm. The sort operation is completely privatized.

- **Edit Distance** - Computes the edit distance between short genetic sequences. The genetic data and computed edit distance is privatized.

- **Netwon-Raphson Solver** - Computes a square-root value using a Newton-Raphson solver. The inputs and outputs of the solver are privatized.


## Building and Running the VIP Benchmarks

First, you have to configure the benchmark suite, which requires creating two symbolic links in the top-level directory: one for the Makefile configuration and one for the C++ compilation configuration. For example, to configure the benchmarks for Agita Labs' Mesosphere encrypted computation library, execute the following commands:
```
ln -sf configs/config.mk.meso config.mk
ln -sf configs/config.h.meso config.h
```

Then, one can build, run and test the benchmarks in each of their respective directories. All benchmarks can be build in three distinct execution modes:

- **Native mode - MODE=na** - This mode runs the benchmark in its original non-privatized form. This *should* be the baseline that you compare against.

- **Data-oblivious mode - MODE=do** - This mode runs the benchmark in data-oblivious execution mode. In this mode, the benchmarks doesn't utilize any
encryption support, but it is also disciplined to never make decisions or access memory based on a privatized value. You can use this mode to better
understand the overheads associated with data-oblivious software changes versus changes needed to add encryption support to the privacy-enhanced
execution.

- **Encrypted mode - MODE=enc** - This mode runs the bencharks in its privatized mode, with data-oblivious execution and full encryption support.

Each benchmark support three standard Makefile targets: build, test, and clean

- **build** - Builds the benchmark

- **test** - Runs the benchmark and validates its output.

- **clean** - Deleted all derived files.

For example, to build, test and then clean the Bubble Sort benchmark in encrypted mode:
```
make MODE=enc build
make MODE=enc test
make MODE=enc clean
```


## Porting the VIP Benchmarks to Another Privacy-Enhanced Computation Framework

The benchmarks suite is designed to be readily ported to other privacy-emhanced computation frameworks. To accomplish this, one needs to define
the approach "config.mk" and "config.h" in the directory "configs/". "config.mk" teaches the top-level makefile how to build the three modes
of benchmarks execution, including their target-specific includes and libraries. "config.h" teaches the VIP benchmarks how to access
privacy-enhanced programming features. Currently, these features include defining various privacy-enhanced data types, decrypting privacy-enhanced
data type (for validating test results only), and conditional move primitives. The underlying privacy-enhanced computation system is assumed to
support both fixed and floating point math.


## Porting New Benchmarks into the VIP Benchmark Suite

We are eager to include new benchmarks into the VIP Benchmark Suite, however, we ask contributors to limit their contributions to benchmarks that
accomplish a non-trivial goal that clear fills a privacy need. New benchmarks do not need to be large and complicated, though, but try to make
them more purposeful than the commonly found "multiply" or "max" benchmarks.

To port a new benchmark to the VIP Benchmark Suite, you need to adapt the application to the VIP_ interfaces defined in the "config.h" file.
These interfaces include:

- **VIP_*_MODE** - These #define's let the benchmark know which of the build modes are requested: native (VIP_NA_MODE), data-oblivious (VIP_DO_MODE),
and encrypted (VIP_ENC_MODE). Note that when VIP_ENC_MODE is defined, VIP_DO_MODE will also be defined, since encrypted variables will force
data-oblivious programming. We kindly ask that the native mode (VIP_NATIVE_MODE) represent the original version of the program, to the extent possible.

- **VIP_CHAR, VIP_INT...** - These #define's hook to the way to define encrypted data types. Note that when running in VIP_NA_MODE, these #define's
will default to the native types, e.g., "char", "int". Benchmarks can assume that the underlying system supports all C/C++ operators on encrypted
data, plus the availability of a LIBM-compatible math library.

- **VIP_CMOV** - To support limited control on encrypted values, the benchmarks assume the existance of a conditional move predicate with the following
semantics: VIP_CMOV(P,T,F) == P ? T : F. This predication primitive is used by the benchmarks to make decisions on encrypted data in a
data-oblivious manner.


## Licensing Details

The portions of the benchmark suite that was build by the VIP Benchmark team are (C) 2019-2020 and available for use under
the [Apache License, version 2.0](https://www.apache.org/licenses/LICENSE-2.0) 

## VIP Benchmark Suite Authors

- Fitsum Andargiae, AAiT
- Todd Austin, UM and Agita Labs
- Lauren Biernacki, UM
- Meron Demissie, AAiT
- Kidus Workneh, AAiT 

And, thanks to the respective authors of the benchmarks that were adapted for the VIP Benchmark Suite from other efforts.

